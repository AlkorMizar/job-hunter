openapi: 3.0.1
info:
  title: Swagger Example API
  description: This is a sample server celler server.
  termsOfService: http://swagger.io/terms/
  contact: {}
  version: "1.0"
servers:
- url: //localhost:8080/
paths:
  /auth:
    post:
      tags:
      - auth
      summary: Authorization
      description: if user exists sets cookie with JWT token
      requestBody:
        description: Email and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.AuthInfo'
        required: true
      responses:
        200:
          description: Message and token
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/model.Token'
                  model.JSONResult:
                    $ref: '#/components/schemas/model.JSONResult'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
  /reg:
    post:
      tags:
      - auth
      summary: Registration
      description: creates new user if unique login and email
      requestBody:
        description: Login, email, password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.NewUser'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
  /user:
    get:
      tags:
      - profile
      summary: User profile 
      description: registred user gets his user info
      security:
        - bearerAuth: []
      responses:
        200:
          description: Message and token
          content:
            application/json:
              schema:
                allOf: # Combines the main `Pet` schema with `Cat`-specific properties 
                  - $ref: '#/components/schemas/model.JSONResult'
                  - type: object
                    # all other properties specific to a `Cat`
                    properties:
                      data:
                        $ref: '#/components/schemas/model.User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        403:
          description: Forbiden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        400:
          description: Bad request(impssible)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
    put:
      tags:
      - profile
      summary: Update user info 
      description: update login/full name/email
      security:
        - bearerAuth: []
      requestBody:
        description: What to change
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.UpdateInfo'
        required: true  
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        403:
          description: Forbiden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
  /user/password:
    put:
      tags:
      - profile
      summary: Update user info 
      description: update login/full name/email
      security:
        - bearerAuth: []
      requestBody:
        description: What to change
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.Passwords'
        required: true  
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        403:
          description: Forbiden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.JSONResult'
  
components:
  schemas:
    model.AuthInfo:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          default: test@test.com
        password:
          maxLength: 40
          minLength: 5
          type: string
          default: test1
    model.JSONResult:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
    model.NewUser:
      required:
      - email
      - login
      - password
      - roles
      type: object
      properties:
        email:
          type: string
          default: test@test.com
        login:
          maxLength: 40
          minLength: 3
          type: string
          default: test
        password:
          type: string
          default: test1
        roles:
          type: array
          items:
            type: string
    model.Token:
      type: object
      properties:
        token:
          type: string
    model.User:
      required:
      - email
      - login
      - fullName
      - roles
      type: object
      properties:
        email:
          type: string
          format: email
          default: test@test.com
        login:
          maxLength: 40
          minLength: 3
          type: string
          default: test
        fullName:
          type: string
          minLength: 3
          maxLength: 150
          default: test
        roles:
          type: array
          items:
            type: string 
          default: admin
    model.UpdateInfo:
      type: object
      properties:
        email:
          type: string
          format: email
          default: test@test.com
        login:
          maxLength: 40
          minLength: 3
          type: string
          default: test
        fullName:
          type: string
          minLength: 3
          maxLength: 150
          default: test
    model.Passwords:
      required:
      - curPassword
      - newPassword
      type: object
      properties:
        curPassword:
          type: string
          maxLength: 40
          minLength: 3
          pattern: '^\S+$'
        newPassword:
          type: string
          maxLength: 40
          minLength: 3
          pattern: '^\S+$'
  securitySchemes:
      bearerAuth:            # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT